poly :: Int -> Int -> Int -> Int -> Int
poly a b c x = a*x*x + b*x + c

eeny :: Int -> String
eeny x = if even x then "eeny" else "meeny"

fizzbuzz :: Int -> String
fizzbuzz x = if mod x 15 == 0
                then "FizzBuzz"
             else if mod x 3 == 0
                    then "Fizz"
             else if mod x 5 == 0
                    then "Buzz"
              else ""

fizzbuzz2 :: Int -> String
fizzbuzz2 x
  | mod x 15 == 0 = "FizzBuzz"
  | mod x 3 == 0 = "Fizz"
  | mod x 5 == 0 = "Buzz"
  | otherwise = ""


tribonacci :: Int -> Int
tribonacci n
  | n == 1 = 1
  | n == 2 = 1
  | n == 3 = 3
  | otherwise = tribonacci (n-1) + tribonacci (n-2) + tribonacci (n-3)

tribonacciEcuational :: Int -> Int
tribonacciEcuational 1 = 1
tribonacciEcuational 2 = 1
tribonacciEcuational 3 = 3
tribonacciEcuational n = tribonacciEcuational (n-1) + tribonacciEcuational (n-2) + tribonacciEcuational (n-3)

binomial :: Int -> Int -> Int
binomial _ 0 = 1
binomial 0 _ = 0
binomial n k = binomial (n-1) k + binomial (n-1) (k-1)

verifL :: [Int] -> Bool
verifL xs = even (length xs)

takefinal :: [Int] -> Int -> [Int]
takefinal l n
  | length l > n = drop (length l - n) l
  | otherwise = l

remove :: [Int] -> Int -> [Int]
remove xs n = take n xs ++ drop (n +1) xs

myreplicate :: Int -> Int -> [Int]
myreplicate 1 v = [v]
myreplicate n v = v : myreplicate (n-1) v

sumImp :: [Int] -> Int 
sumImp [] = 0 
sumImp (x:xs) = if odd x then x + sumImp xs else sumImp xs

totalLen :: [String] -> Int
totalLen [] = 0
totalLen (x:xs) = if head x == 'A' then length x + totalLen xs else totalLen xs 

--head x sau x !! 0 (=x[0])