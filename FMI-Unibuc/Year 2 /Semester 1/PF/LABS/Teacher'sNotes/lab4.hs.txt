{-
[ x^2 | x <- [1..10], x `rem` 3 == 2]
-> [4, 25, 64]

[(x,y)| x <- [1..5], y <- [x..(x+2)]]
-> [(1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (2, 4), (3, 3), (3, 4), (3, 5), (4, 4), (4, 5), (4, 6), (5, 5), (5, 6), (5, 7)]

[(x,y)| x <- [1..3], let k = x ^ 2, y <- [1..k]]
-> [(1, 1), (2, 1), (2, 2), (2, 3), (2, 4), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9)]

[ x | x <- "Facultatea de Matematica si Informatica", elem x ['A'..'Z']]
-> "FMI"

[[x..y]| x <- [1..5], y <- [1..5], x < y]
-> [[1, 2], [1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5], [2, 3], [2, 3, 4], [2, 3, 4, 5], [3, 4], [3, 4, 5], [4, 5]]
-}

-- ex 2
factori :: Int -> [Int]
factori n = [d | d <- [1..n], n `mod` d == 0]

-- ex 3
prim :: Int -> Bool
prim n = length (factori n) == 2

-- ex 4
numerePrime :: Int -> [Int]
numerePrime n = [nr | nr <- [2..n], prim nr]

-- ex 5
-- myzip3 [1, 2, 3] [1, 2] [1, 2, 3, 4] == [(1, 1, 1), (2, 2, 2)]

myzip3 :: [a] -> [b] -> [c] -> [(a, b, c)]
myzip3 l1 l2 l3 = [(a, b, c) | (a, (b, c)) <- zip l1 (zip l2 l3)]

-- Compunere de functii:
aplica2 :: (a -> a) -> a -> a
aplica2 f x = f (f x)

aplica2' :: (a -> a) -> a -> a
aplica2' f = f . f

aplica2'' :: (a -> a) -> a -> a
aplica2'' = \f x -> f (f x)

aplica2''' :: (a -> a) -> a -> a
aplica2''' f = \x -> f (f x)

{- Functia map:
map :: (a -> b) -> [a] -> [b]
map f xs =[f x | x <- xs]

map (\x -> 2 * x) [1..10]
-> [2, 4..20]

map (1 `elem`) [[2,3], [1,2]]
-> [False, True]

map (`elem` [2, 3]) [1, 3, 4, 5]
-> [False, True, False, False]
-}

{- Functia filter:
filter :: (a -> Bool) -> [a] -> [a]
filter p xs = [x | x <- xs, p x]

filter (> 2) [3, 1, 4, 2, 5]
-> [3, 4, 5]

filter odd [3, 1, 4, 2, 5]
-> [3, 1, 5]
-}

-- ex 6
-- firstEl [('a', 3), ('b', 2), ('c', 1)] == "abc"

firstEl :: [(a, b)] -> [a]
firstEl = map fst
-- sau map (\(a, b) -> a) list

-- ex 7
-- sumList [[1, 3], [2, 4, 5], [], [1, 3, 5, 6]] == [4, 11, 0, 15]

sumList :: [[Int]] -> [Int]
sumList lst = map sum lst

-- ex 8
-- prel2 [2, 4, 5, 6] == [1, 2, 10, 3]

prel2 :: [Int] -> [Int]
prel2 list = map (\ x -> if x `mod` 2 == 0 then x `div` 2 else x * 2) list

prel2_aux :: Int -> Int
prel2_aux x
  | even x = div x 2
  | otherwise = x * 2

prel2_2 :: [Int] -> [Int]
prel2_2 lst = map prel2_aux lst

-- ex 9
-- ex9 's' ["sos", "civic", "palton", "desen", "aerisire"] == ["sos", "desen", "aerisire"]

ex9 :: Char -> [String] -> [String]
ex9 c s = filter (elem c) s

-- ex 10
-- ex10[3..8] == [9, 25, 49]

ex10, ex10_2 :: [Int] -> [Int]
ex10  = map (^2) . filter odd

ex10_2 lst = map (^2) (filter odd lst) --map (^2) $ filter odd lst

-- ex 11
-- ex11 [3..8] == [16, 36, 64]

ex11 :: [Int] -> [Int]
ex11 list = map (\(a, b) -> a * a) (filter (\(a, b) -> odd b) (zip list [0..]))

-- ex 12
-- numaiVocale ["laboratorul", "PrgrAmare", "DEclarativa"] == ["aoaou", "Aae", "Eaaia"]

numaiVocale :: [String] -> [String]
numaiVocale lst = map (filter (\c -> elem c "aeiouAEIOU")) lst

-- ex 13
mymap :: (a -> b) -> [a] -> [b]
mymap _ [] = []
mymap f (x:xs) = f x : mymap f xs

myfilter :: (a -> Bool)  -> [a] -> [a]
myfilter _ [] = []
myfilter p (x:xs)
  | p x = x : myfilter p xs
  | otherwise = myfilter p xs