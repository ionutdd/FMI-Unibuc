SELECT * FROM emp_ido;

SELECT * FROM employees;

SET SERVEROUTPUT ON;


--Tipul Record

DECLARE 
    TYPE angajat IS RECORD (cod employees.employee_id %TYPE, salariu employees.salary %TYPE, job employees.job_id %TYPE);
    v_ang angajat;
BEGIN
    SELECT employee_id, salary, job_id
    INTO v_ang.cod, v_ang.salariu, v_ang.job
    FROM employees
    WHERE employee_id = 100;
    DBMS_OUTPUT.PUT_LINE(v_ang.cod || ' ' || v_ang.salariu || ' ' || v_ang.job);
END;
/



--% ROWTYPE

DECLARE 
    TYPE angajat IS RECORD (cod employees.employee_id %TYPE, salariu employees.salary %TYPE, job employees.job_id %TYPE);
    v_ang angajat;
    v_ang1 employees % ROWTYPE;
BEGIN
    --v_ang1.employee_id := 300;
    SELECT * INTO v_ang1 
    FROM employees 
    WHERE employee_id = 100;
    
    INSERT INTO emp_ido
    VALUES v_ang1; --pretty neat and concise
    
    UPDATE emp_ido
    SET Row = v_ang1
    WHERE employee_id = 100;
END;
/



--Colectii

--v_colectie1.count  nr de elem al unei colectii


--Tablouri indexate!!!!!!

DECLARE 
    TYPE t_tablou_indexat IS TABLE OF NUMBER(10) --asta e valoarea, practic un dictionar
                             INDEX BY PLS_INTEGER; --VARCHAR2, BINARY_INTEGER, asta e cheia
    t t_tablou_indexat;
BEGIN
    t(5) := 10;
    t(6) := NULL;
    DBMS_OUTPUT.PUT_LINE(t(5));
    DBMS_OUTPUT.PUT_LINE(t.count); -- 2 elemente
    
    t.DELETE(6);
    DBMS_OUTPUT.PUT_LINE(t.count); -- 1 element
END;
/


DECLARE
 TYPE tablou_indexat IS TABLE OF NUMBER INDEX BY PLS_INTEGER;
 t tablou_indexat;
BEGIN

 FOR i IN 1..10 LOOP                           --un loop important
 t(i):=i;                       
 END LOOP;
 
 DBMS_OUTPUT.PUT('Tabloul are ' || t.COUNT ||' elemente: ');
 
 FOR i IN t.FIRST..t.LAST LOOP                   --alt loop importnat  (IN REVERSE ) pt invers
 DBMS_OUTPUT.PUT(t(i) || ' ');
 END LOOP;
 
 DBMS_OUTPUT.NEW_LINE;
 
 
-- punctul b
 FOR i IN 1..10 LOOP
 IF i mod 2 = 1 THEN t(i):=null;
 END IF;
 END LOOP;
 DBMS_OUTPUT.PUT('Tabloul are ' || t.COUNT ||' elemente: ');
 
 FOR i IN t.FIRST..t.LAST LOOP
 DBMS_OUTPUT.PUT(nvl(t(i), 0) || ' ');                  --va afisa string emty in loc de NULL
 END LOOP;
 
 DBMS_OUTPUT.NEW_LINE;
 
 
-- punctul c
 t.DELETE(t.first);
 t.DELETE(5,7);                                        --intre pozitiile 5 si 7
 t.DELETE(t.last);
 DBMS_OUTPUT.PUT_LINE('Primul element are indicele ' || t.first ||
 ' si valoarea ' || nvl(t(t.first),0));
DBMS_OUTPUT.PUT_LINE('Ultimul element are indicele ' || t.last ||
 ' si valoarea ' || nvl(t(t.last),0));
 DBMS_OUTPUT.PUT('Tabloul are ' || t.COUNT ||' elemente: ');
 
 
 FOR i IN t.FIRST..t.LAST LOOP
 IF t.EXISTS(i) THEN                                       --asa apelam sa nu primim eroare cand incercam sa accesam ceva ce nu are apelat nimic 
 DBMS_OUTPUT.PUT(nvl(t(i), 0)|| ' ');
 END IF;
 END LOOP;
 
 
 i := t.first;
 WHILE i <= t.LAST LOOP                           --i >= t.FIRST.LOOP
    DBMS_OUTPUT.PUT_LINE(t(i));
    i := t.NEXT;      --i := t.prior                                     --asa calculeaza urm index
 END LOOP;
    
 
 DBMS_OUTPUT.NEW_LINE;
-- punctul d
 t.delete;                                                --asa dam release la toata zona de memorie
 DBMS_OUTPUT.PUT_LINE('Tabloul are ' || t.COUNT ||' elemente.');
END;
/


--Bulk collect into

DECLARE 
    TYPE t_ang IS TABLE OF employees %ROWTYPE 
                            INDEX BY PLS_INTEGER;
    v_ang t_ang;
BEGIN
    SELECT * 
    BULK COLLECT INTO v_ang  --o lista de angajati (un fel de lista de liste)
    FROM employees;
    
    --la fel si la DELETE ... RETURNING ... BULK COLLECT INTO ..
                 --UPDATE  tot la fel
END;
/





--Tablou imbricat (tabela in interiourl unei tabele)

DECLARE 
    TYPE t_tablou_imbricat IS TABLE OF NUMBER(10);
    t t_tablou_imbricat := t_tablou_imbricat(); --constructorul default ce face o lista goala, este nevoie de el altfel err
                            --t_tablou_imbricat(1,2,3...) toate elem de care avem nevoie ca size-ul sa ramana constant
BEGIN
    t.EXTEND(100); -- creeaza urm 100 chei, daca dam un count deja e 100
    FOR i IN 1..100 LOOP
        --t.EXTEND; --creeaza urm cheie
        t(i) := i;
    END LOOP;
END;
/





DECLARE
 TYPE tablou_imbricat IS TABLE OF NUMBER;
 t tablou_imbricat := tablou_imbricat();
BEGIN
-- punctul a
 FOR i IN 1..10 LOOP
 t.extend;
 t(i):=i;
 END LOOP;
 DBMS_OUTPUT.PUT('Tabloul are ' || t.COUNT ||' elemente: ');

 FOR i IN t.FIRST..t.LAST LOOP
 DBMS_OUTPUT.PUT(t(i) || ' ');
 END LOOP;
 DBMS_OUTPUT.NEW_LINE;
-- punctul b
 FOR i IN 1..10 LOOP
 IF i mod 2 = 1 THEN t(i):=null;
 END IF;
 END LOOP;
 DBMS_OUTPUT.PUT('Tabloul are ' || t.COUNT ||' elemente: ');
 FOR i IN t.FIRST..t.LAST LOOP
 DBMS_OUTPUT.PUT(nvl(t(i), 0) || ' ');
 END LOOP;
 DBMS_OUTPUT.NEW_LINE;
-- punctul c
 t.DELETE(t.first);
 t.DELETE(5,7);
 t.DELETE(t.last);
 DBMS_OUTPUT.PUT_LINE('Primul element are indicele ' || t.first ||
 ' si valoarea ' || nvl(t(t.first),0));
 DBMS_OUTPUT.PUT_LINE('Ultimul element are indicele ' || t.last ||
 ' si valoarea ' || nvl(t(t.last),0));
 DBMS_OUTPUT.PUT('Tabloul are ' || t.COUNT ||' elemente: ');
 FOR i IN t.FIRST..t.LAST LOOP
 IF t.EXISTS(i) THEN
 DBMS_OUTPUT.PUT(nvl(t(i), 0)|| ' ');
 END IF;
 END LOOP;
 DBMS_OUTPUT.NEW_LINE;
-- punctul d
 t.delete;
 DBMS_OUTPUT.PUT_LINE('Tabloul are ' || t.COUNT ||' elemente.');
END;
/



--exemplu cu WHILE

DECLARE
TYPE tablou_imbricat IS TABLE OF CHAR(1);
t tablou_imbricat := tablou_imbricat('m', 'i', 'n', 'i', 'm');
 i INTEGER;
BEGIN
i := t.FIRST;
WHILE i <= t.LAST LOOP
 DBMS_OUTPUT.PUT(t(i));
 i := t.NEXT(i);
END LOOP;
DBMS_OUTPUT.NEW_LINE;
 i := t.LAST;
WHILE i >= t.FIRST LOOP
 DBMS_OUTPUT.PUT(t(i));
 i := t.PRIOR(i);
END LOOP;
DBMS_OUTPUT.NEW_LINE;
 t.delete(2);
 t.delete(4);
i := t.FIRST;
WHILE i <= t.LAST LOOP
 DBMS_OUTPUT.PUT(t(i));
 i := t.NEXT(i);
END LOOP;
DBMS_OUTPUT.NEW_LINE;
 i := t.LAST;
WHILE i >= t.FIRST LOOP
 DBMS_OUTPUT.PUT(t(i));
 i := t.PRIOR(i);
END LOOP;
DBMS_OUTPUT.NEW_LINE;
END;
/






--Vectori (VARRAY)
--la delete nu va mai merge delete t(5,7), dar putem sa stergem toata lista
DECLARE 
    TYPE t_vector IS VARRAY(20) OF NUMBER;
    t t_vector := t_vector();
BEGIN 
    t.extend(10);
    FOR i in 1..10 LOOP
        t.EXTEND();
        t(i) := i;
    END LOOP;
END;
/







--E2
--a)
SELECT DT, ( SELECT COUNT(*) 
             FROM rental WHERE 
             EXTRACT(DAY FROM book_date) = EXTRACT(DAY FROM DT)
             AND EXTRACT(MONTH FROM book_date) = EXTRACT(MONTH FROM DT))  AS "Imprumuturi"
FROM(SELECT TRUNC (last_day(SYSDATE) - ROWNUM) dt
     FROM DUAL CONNECT BY ROWNUM < EXTRACT(DAY FROM last_day(sysdate)))
ORDER BY DT;

--b)
CREATE TABLE octombrie_ido(zi NUMBER(10), book_date DATE);

DECLARE
    rentals NUMBER(3) := 0;
    d NUMBER(3) := EXTRACT(DAY FROM last_day(sysdate));
BEGIN
    FOR i IN 1..d LOOP
        SELECT COUNT(*) INTO rentals FROM rental 
        WHERE EXTRACT(DAY FROM book_date) = i
        AND EXTRACT(MONTH FROM book_date) = EXTRACT(MONTH FROM SYSDATE);
        INSERT INTO octombrie_ido VALUES (i, TO_DATE(i ||' 10'||' 2020', 'DD MM YYYY'));
    END LOOP;
END;

select * from octombrie_ido;
select * from member;

--E4
DECLARE 
    V_NUME member.last_name % TYPE := '&NUME';
    V_MEMBER_ID member.member_id % TYPE;
    V_NR_FILME NUMBER(5);
    num NUMBER(3) := 0;
    procent NUMBER(3) := 0;
BEGIN 
    SELECT member_id 
    INTO V_MEMBER_ID
    FROM member
    WHERE last_name = V_NUME;

    SELECT COUNT(DISTINCT title_id)
    INTO V_NR_FILME
    FROM rental 
    WHERE member_id = V_MEMBER_ID;

    DBMS_OUTPUT.PUT_LINE(V_NR_FILME);
    
    SELECT COUNT(title) INTO num
    FROM rental JOIN title USING (title_id);
    
    procent := (v_member_id / num) * 100;
    IF procent > 75 THEN
        dbms_output.put_line('Categoria 1');
    ELSIF procent > 50 THEN
        dbms_output.put_line('Categoria 2');
    ELSIF procent > 25 THEN
        dbms_output.put_line('Categoria 3');
    ELSE
        dbms_output.put_line('Categoria 4');
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('None');
    WHEN TOO_MANY_ROWS THEN
        DBMS_OUTPUT.PUT_LINE('Prea multi');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Sth else wrong');
END;

--EX5
CREATE TABLE member_ido AS (SELECT * FROM member);

ALTER TABLE member_ido ADD CONSTRAINT PK_member_ido PRIMARY KEY (member_id);

ALTER TABLE member_ido
ADD discount NUMBER;


SET VERIFY OFF
DECLARE
    id member_ido.member_id%TYPE := &id;
    nr_1 NUMBER;
    nr_2 NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO nr_2
    FROM title;
    
    SELECT COUNT(DISTINCT title_id)
    INTO nr_1
    FROM rental r JOIN member_ido m USING (member_id)
    GROUP BY member_id
    HAVING member_id = id;
    
    CASE WHEN nr_1 * 100 / nr_2 >= 75 THEN 
            UPDATE member_ido
            SET DISCOUNT = 10
            WHERE MEMBER_ID = id;
            COMMIT;
        WHEN nr_1 * 100 / nr_2 >= 50 THEN 
            UPDATE member_ido
            SET DISCOUNT = 5
            WHERE MEMBER_ID = id;
            COMMIT;
        WHEN nr_1 * 100 / nr_2 >= 25 THEN
            UPDATE member_ido
            SET DISCOUNT = 3
            WHERE MEMBER_ID = id;
            COMMIT;
    END CASE;        
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('None');
END;


--E6
--5
--Sa se afle numele Utilizatorului cu cele mai multe tipuri de rating
BEGIN
 SELECT username
 INTO :rezultat
 FROM Utilizatori u, Rating r
 WHERE u.id_utilizator = r.id_rating
 GROUP BY id_utilizator
 HAVING COUNT(*) = (SELECT MAX(COUNT(*))
 FROM Utilizatori
GROUP BY id_rating);
 DBMS_OUTPUT.PUT_LINE('Utilizatorul '|| :rezultat);
END;
/

DESCRIBE employees;


--Tema E1

SET SERVEROUTPUT ON;

DECLARE
  TYPE EmployeeCollection IS TABLE OF employees.employee_id%TYPE;

  employees_with_lowest_salary EmployeeCollection;
BEGIN
  SELECT employee_id BULK COLLECT INTO employees_with_lowest_salary
  FROM (
    SELECT employee_id
    FROM employees
    WHERE commission_pct IS NULL
    ORDER BY salary
  )
  WHERE ROWNUM <= 5;


  FOR i IN 1..employees_with_lowest_salary.COUNT LOOP
      DBMS_OUTPUT.PUT_LINE('Employee ID: ' || employees_with_lowest_salary(i));
      
      --Print Old Salary
      DECLARE
        old_salary employees.salary%TYPE;
      BEGIN
        SELECT salary INTO old_salary
        FROM employees
        WHERE employee_id = employees_with_lowest_salary(i);

        DBMS_OUTPUT.PUT_LINE('Old Salary: ' || old_salary);
      END;
      
      UPDATE employees
      SET salary = salary * 1.05
      WHERE employee_id = employees_with_lowest_salary(i);
      
      --Print New Salary
      DECLARE
        new_salary employees.salary%TYPE;
      BEGIN
        SELECT salary INTO new_salary
        FROM employees
        WHERE employee_id = employees_with_lowest_salary(i);

        DBMS_OUTPUT.PUT_LINE('New Salary: ' || new_salary);
      END;
      
      DBMS_OUTPUT.PUT_LINE('-------------------');
  END LOOP;

END;
/

