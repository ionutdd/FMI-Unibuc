SET SERVEROUTPUT ON;

--asta e ciclu cursor cu FOR i IN C
DECLARE 
    CURSOR c IS 
        SELECT * FROM employees
        WHERE TO_CHAR(hire_date, 'YYYY' )= 2000
        FOR UPDATE OF salary 
        NOWAIT; --WAIT nr_secunde     asta arunca eroare
BEGIN 
    FOR i IN c LOOP
        UPDATE employees
        SET salary = salary + 1000
        WHERE CURRENT OF c;  --ia la randul curent din cursorul c
    END LOOP;
END;
/


--ex 10 varianta 3 (ciclu cursor cu subcereri)

BEGIN 
    FOR v_dept IN (                 --acest cursor se deschide o singura data, atat
        SELECT * FROM departments
        WHERE department_id IN (10,20,30,40)
     LOOP   
    --DBMS.OUTPUT...
    
        FOR v_emp IN (                 --acest cursor se deschise o data pt fiecare departament  (cand se inchide for-ul se inchide cursorul)
            SELECT * FROM employees
            WHERE department_id = v_dept.department_id)
        LOOP
        --DBMS.OUTPUT...
        END LOOP;
    END LOOP;
END;


--curosor clasic

OPEN 
LOOP
FETCH 
EXIT WHEN 
END LOOP



--exercitiu

DECLARE
     CURSOR c_dept IS (SELECT *
     FROM departments
     WHERE department_id IN (10,20,30,40));
     
     CURSOR c_emp (v_dept_id departments.department_id%TYPE) IS (SELECT * FROM employees
                                                                 WHERE department_id = v_dept_id); 
                                                                 
     v_dept departments%ROWTYPE;
     v_emp employees%ROWTYPE;
BEGIN
     
     OPEN c_dept;
     LOOP 
         FETCH c_dept INTO v_dept;
         EXIT WHEN c_dept%NOTFOUND;
         DBMS_OUTPUT.PUT_LINE(v_dept.department_name);
         OPEN c_emp(v_dept.department_id);
             LOOP 
                 FETCH c_emp INTO v_emp;
                 EXIT WHEN c_emp%NOTFOUND;
                 DBMS_OUTPUT.PUT_LINE(v_emp.last_name);
                 END LOOP;
                 CLOSE c_emp;
         END LOOP;
    
     CLOSE c_dept;
END;
/




--ref cursor, e un cursor dinamic
--cea mai complicata de scris, dar cea mai eficient dpdv al resurselor

DECLARE 
    TYPE refCursor IS REF CURSOR;
    CURSOR c_dept IS (SELECT department_name, CURSOR ( SELECT last_name FROM employees e WHERE e.department_id = d.department_id)
                      FROM departments d
                      WHERE department_id IN (10,20,30,40));
    
    v_nume_dept VARCHAR2(50);
    c_emp refCursor;
    v_nume_emp VARCHAR2(50);
BEGIN
    OPEN c_dept;
    LOOP 
        FETCH c_dept INTO 
            v_nume_dept, c_emp;
        EXIT WHEN c_dept %NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(v_nume_dept);
        DBMS_OUTPUT.PUT_LINE('----------');
        
        LOOP 
            FETCH c_emp INTO v_nume_emp;
            EXIT WHEN c_emp%NOTFOUND;
            DBMS_OUTPUT.PUT_LINE(v_nume_emp);
        END LOOP;
    END LOOP;
END;
/


--primim puncte bonus la prioect, sau teme daca facem asa (ca e mai avansat)
--cu return acum 

DECLARE 
    TYPE refCursor IS REF CURSOR 
                RETURN 
                    employees %ROWTYPE;
    c_emp refCursor;
    v_ang employees%ROWTYPE;
    v_opt NUMBER := &p_opt;
BEGIN
    OPEN 
    IF v_opt = 1 THEN
        OPEN c_emp FOR SELECT * FROM employees;
    ELSE
        OPEN c_emp FOR SELECT * FROM  employees WHERE salary BETWEEN 10000 AND 20000;
    END IF;
    
    LOOP 
        FETCH c_emp INTO v_ang;
        EXIT WHEN c_emp%NOTFOUND;
        --afisare
    END LOOP;
    CLOSE c_emp;
END;
/
    
    
--Tema


SET SERVEROUTPUT ON;
    
CREATE type tip_orase_ido;    
    
CREATE TABLE excursie_ido (
    cod_excursie NUMBER(4) NOT NULL PRIMARY KEY,
    denumire VARCHAR2(20),
    orase VARCHAR(20),
    status varchar(20)
);


--E2


DECLARE
    orase_curente excursie_ido.orase%TYPE;
    cod_excursie_specificat excursie_ido.cod_excursie%TYPE;
    oras_vizitat1 VARCHAR2(20);
    oras_vizitat2 VARCHAR2(20);
    id_oras_1 INTEGER(5);
    id_oras_2 INTEGER(5);
    aux VARCHAR2(20);
    oras_specificat VARCHAR2(20);
    pozitie_sters INTEGER(5);
    numar_orase_vizitate INTEGER(5);
    
    curr_orase excursie_ido.orase%TYPE;
    cod_excursie excursie_ido.cod_excursie%TYPE;
    nr_excursii NUMBER;
    TYPE vector IS varray(20) OF excursie_ido.cod_excursie%TYPE;
    excursii vector;
BEGIN
    DELETE FROM excursie_ido;
    -- a
    for i IN 1..5 LOOP
        INSERT INTO excursie_ido (cod_excursie, denumire, orase, status) VALUES (i, 'nume '|| i, tip_orase_ido('o1', 'o2'), 'aiic');
    END LOOP;
    -- b
    cod_excursie_specificat := &cod_excursie;
    SELECT orase INTO orase_curente 
    FROM excursie_ido 
    WHERE cod_excursie = cod_excursie_specificat;
    
    -- b1
    orase_curente.extend();
    orase_curente(orase_curente.COUNT) := 'nou';
    
    -- b2
    orase_curente.extend();
    for i IN REVERSE 2..orase_curente.COUNT LOOP
        orase_curente(i) := orase_curente(i-1);
    END LOOP;
    orase_curente(2) := 'sec';
    
    -- b3
    oras_vizitat1 := '_o1';
    oras_vizitat2 := '_o2';
    id_oras_1 := 1;
    id_oras_2 := 1;
    FOR i IN 1..orase_curente.COUNT LOOP
        IF orase_curente(i) = oras_vizitat1 THEN
            id_oras_1 := i;
        END IF;
        IF orase_curente(i) = oras_vizitat2 THEN
            id_oras_2 := i;
        END IF;
    END LOOP;
    aux := orase_curente(id_oras_1);
    orase_curente(id_oras_1) := orase_curente(id_oras_2);
    orase_curente(id_oras_2) := aux;
    
    -- b4
    oras_specificat := 'spec';
    FOR i IN 1..orase_curente.COUNT LOOP
        IF orase_curente(i) = oras_specificat THEN 
            pozitie_sters := i;
        END IF;
    END LOOP;
    FOR i IN REVERSE pozitie_sters..orase_curente.COUNT LOOP
        orase_curente(i) := orase_curente(i - 1);
    END LOOP;
    orase_curente.TRIM;
    -- then update
    UPDATE excursie_ido SET orase = orase_curente WHERE cod_excursie = cod_excursie_specificat;
    -- c
    DBMS_OUTPUT.put_line('Numar orase: '|| orase_curente.count ||', orase: ');
    FOR i IN 1..orase_curente.COUNT LOOP
        DBMS_OUTPUT.put_line(orase_curente(i) || ', ');
    END LOOP;
    -- d
    SELECT cod_excursie BULK COLLECT INTO excursii FROM excursie_ido;
    FOR i IN 1..excursii.COUNT LOOP
        SELECT orase INTO curr_orase
        FROM excursie_ido
        WHERE cod_excursie = excursii(i);
        DBMS_OUTPUT.put_line('Excursia ' || excursii(i) || ': ');
        FOR i IN 1..curr_orase.COUNT LOOP
            DBMS_OUTPUT.put_line(curr_orase(i) || ', ');
        END LOOP;
    END LOOP;
    -- e
    
END;
select * from excursie_ido;



--E1

-- a
DECLARE 
    CURSOR c (job_curent jobs.job_id%TYPE) IS 
        SELECT e.last_name, e.first_name, e.salary
        FROM employees e, jobs j
        WHERE j.job_id = e.job_id and j.job_id = job_curent; 
    numar_joburi NUMBER;
    titlu_job jobs.job_title%TYPE;
    nume_angajat employees.first_name%TYPE;
    prenume_angajat employees.last_name%TYPE;
    salariu employees.salary%TYPE;
    TYPE tip_joburi IS TABLE OF jobs.job_id%TYPE;
    joburi tip_joburi := tip_joburi();
    counter NUMBER(5);
BEGIN
    SELECT COUNT(*) INTO numar_joburi FROM jobs;
    joburi.EXTEND(numar_joburi);
    SELECT j.job_id BULK COLLECT INTO joburi FROM jobs j;
    
    FOR i IN joburi.FIRST..joburi.LAST LOOP   
        SELECT job_title
        INTO titlu_job
        FROM jobs j
        WHERE j.job_id = joburi(i);
        DBMS_OUTPUT.put_line(titlu_job);
        counter := 0;
        
        OPEN c(joburi(i));
        LOOP
            FETCH c INTO nume_angajat, prenume_angajat, salariu;
            EXIT WHEN c%NOTFOUND;
            DBMS_OUTPUT.put_line(nume_angajat || ' ' || prenume_angajat || ' ' || salariu);
            counter := counter + 1;
        END LOOP;
        CLOSE c;
        IF counter = 0 THEN 
            DBMS_OUTPUT.put_line('Niciun anj');
        END IF;
        DBMS_OUTPUT.new_line();
    END LOOP;
END;
/
    
-- b
DECLARE 
    TYPE tip_joburi IS TABLE OF jobs.job_id%TYPE;
    CURSOR c (job_curent jobs.job_id%TYPE)IS 
        SELECT e.last_name l_name, e.first_name f_name, e.salary salary
        FROM employees e, jobs j
        WHERE j.job_id = e.job_id AND
                j.job_id = job_curent;
                    numar_joburi NUMBER;
    titlu_job jobs.job_title%TYPE;
    nume_angajat employees.first_name%TYPE;
    prenume_angajat employees.last_name%TYPE;
    salariu employees.salary%TYPE;
    joburi tip_joburi := tip_joburi();
    counter NUMBER(5);
BEGIN
    SELECT COUNT(*) INTO numar_joburi FROM jobs;
    joburi.EXTEND(numar_joburi);
    SELECT j.job_id BULK COLLECT INTO joburi FROM jobs j;
    
    FOR i IN joburi.FIRST..joburi.LAST LOOP   
    
        SELECT job_title
        INTO titlu_job
        FROM jobs j
        WHERE j.job_id = joburi(i);
        DBMS_OUTPUT.put_line(titlu_job);
        counter := 0;
        
        FOR j IN c(joburi(i)) LOOP
            EXIT WHEN c%NOTFOUND;
            DBMS_OUTPUT.put_line(j.f_name || ' ' || j.l_name || ' ' || j.salary);
            counter := counter + 1;
        END LOOP;
        IF counter = 0 THEN 
            DBMS_OUTPUT.put_line('Niciun ang.');
        END IF;
        DBMS_OUTPUT.new_line();
    END LOOP;
END;
/
    
-- c 
DECLARE 
    TYPE tip_joburi IS TABLE OF jobs.job_id%TYPE;
    CURSOR c (job_curent jobs.job_id%TYPE)IS 
        SELECT e.last_name l_name, e.first_name f_name, e.salary salary
        FROM employees e, jobs j
        WHERE j.job_id = e.job_id AND
                j.job_id = job_curent;
    numar_joburi NUMBER;
    titlu_job jobs.job_title%TYPE;
    nume_angajat employees.first_name%TYPE;
    prenume_angajat employees.last_name%TYPE;
    salariu employees.salary%TYPE;
    joburi tip_joburi := tip_joburi();
    counter NUMBER(5);
BEGIN
    SELECT COUNT(*) INTO numar_joburi FROM jobs;
    joburi.EXTEND(numar_joburi);
    select j.job_id BULK COLLECT INTO joburi FROM jobs j;
    
    FOR i IN joburi.FIRST..joburi.LAST LOOP   
    
        SELECT job_title
        INTO titlu_job
        FROM jobs j
        WHERE j.job_id = joburi(i);
        DBMS_OUTPUT.put_line(titlu_job);
        counter := 0;
        
        FOR j IN (SELECT e.last_name l_name, e.first_name f_name, e.salary salary
                    FROM employees e, jobs j
                    WHERE j.job_id = e.job_id AND
                    j.job_id = joburi(i)) 
        LOOP
            DBMS_OUTPUT.put_line(j.f_name || ' ' || j.l_name || ' ' || j.salary);
            counter := counter + 1;
        END LOOP;
        IF counter = 0 THEN 
            DBMS_OUTPUT.put_line('Niciun ang.');
        END IF;
        DBMS_OUTPUT.new_line();
    END LOOP;
END;
/
    
    
--E4

--9

CREATE OR REPLACE TYPE administratori_ido AS VARRAY(10) OF NUMBER(4);
/
CREATE TABLE utilizatori_ido (cod_mgr NUMBER(10),
 nume VARCHAR2(20),
 lista utilizatori_ido);
DECLARE
 v_sub administartori_ido:= administratori_ido(100,200,300);
 v_lista utilizatori_ido.lista%TYPE;
BEGIN
 INSERT INTO administratori_ido
 VALUES (1, 'Adm 1', v_sub);
 INSERT INTO administratori_ido
 VALUES (2, 'Adm 2', null);

 INSERT INTO administratori_ido
 VALUES (3, 'Adm 3', utilizatori_ido(4,5));

 SELECT lista
 INTO v_lista
 FROM administratori_ido
 WHERE cod_mgr=1;

 FOR j IN v_lista.FIRST..v_lista.LAST LOOP
 DBMS_OUTPUT.PUT_LINE (v_lista(j));
 END LOOP;
END;
/
SELECT * FROM manageri_ido;


--10


CREATE TABLE emp_test_ido AS
 SELECT id_utilizator, nume FROM utilizatori
 WHERE ROWNUM <= 2;
CREATE OR REPLACE TYPE tip_telefon_ido IS TABLE OF VARCHAR(12);
/
ALTER TABLE emp_test_ido
ADD (telefon tip_telefon_ido)
NESTED TABLE telefon STORE AS tabel_telefon_ido;
INSERT INTO emp_test_ido
VALUES (500, 'XYZ',tip_telefon_ido('074XXX', '0213XXX', '037XXX'));
UPDATE emp_test_ido
SET telefon = tip_telefon_ido('073XXX', '0214XXX')
WHERE employee_id=100;
SELECT a.employee_id, b.*
FROM emp_test_ido a, TABLE (a.telefon) b;
DROP TABLE emp_test_ido;
DROP TYPE tip_telefon_ido;
    

CREATE OR REPLACE TYPE string_table_type AS TABLE OF VARCHAR2(100);


CREATE TABLE large_table (
    id NUMBER,
    name VARCHAR2(100),
    description VARCHAR2(500)
);


INSERT INTO large_table
SELECT LEVEL, 'Name ' || LEVEL, 'Description ' || LEVEL
FROM dual
CONNECT BY LEVEL <= 10000000;
    
    
    
    
    
CREATE OR REPLACE PROCEDURE get_string_collection (
    p_input_value VARCHAR2,
    p_collection OUT string_table_type,
    p_execution_time OUT NUMBER
) IS
    v_start_time TIMESTAMP;
    v_end_time TIMESTAMP;

BEGIN
    v_start_time := SYSTIMESTAMP;

    SELECT name
    BULK COLLECT INTO p_collection
    FROM large_table
    WHERE description = p_input_value;

    v_end_time := SYSTIMESTAMP;

    p_execution_time := EXTRACT(SECOND FROM (v_end_time - v_start_time));

EXCEPTION
    WHEN OTHERS THEN
        NULL;
END get_string_collection;
/








CREATE OR REPLACE PROCEDURE get_string_collection2 (
    p_input_value VARCHAR2,
    p_collection OUT NOCOPY string_table_type,
    p_execution_time OUT NUMBER
) IS
    v_start_time TIMESTAMP;
    v_end_time TIMESTAMP;
BEGIN
    v_start_time := SYSTIMESTAMP;

    SELECT name
    BULK COLLECT INTO p_collection
    FROM large_table
    WHERE description = p_input_value;

    v_end_time := SYSTIMESTAMP;

    p_execution_time := EXTRACT(SECOND FROM (v_end_time - v_start_time));

EXCEPTION
    WHEN OTHERS THEN
        NULL;
END get_string_collection2;
/



DECLARE
    my_collection1 string_table_type;
    execution_time1 NUMBER;
    my_collection2 string_table_type;
    execution_time2 NUMBER;
BEGIN
    -- Measure time for get_string_collection
    get_string_collection('Description 1', my_collection1, execution_time1);
    DBMS_OUTPUT.PUT_LINE('Execution Time for get_string_collection: ' || execution_time1 || ' seconds');

    -- Measure time for get_string_collection2 with NOCOPY
    get_string_collection2('Description 1', my_collection2, execution_time2);
    DBMS_OUTPUT.PUT_LINE('Execution Time for get_string_collection2 with NOCOPY: ' || execution_time2 || ' seconds');
END;
/













--cream un tabel

CREATE TABLE example_table (
    id NUMBER,
    name VARCHAR2(100)
);


--Programam un Job sa inseram date (DBMS_JOB) (delay de un minut)

DECLARE
    job_number NUMBER;
BEGIN
    DBMS_JOB.submit(
        job => job_number,
        what => 'BEGIN
                    INSERT INTO example_table VALUES (1, ''John'');
                    INSERT INTO example_table VALUES (2, ''Jane'');
                    COMMIT;
                END;',
        next_date => SYSTIMESTAMP + INTERVAL '1' MINUTE
    );

    COMMIT;

    DBMS_OUTPUT.PUT_LINE('Job Number: ' || job_number);
END;
/    
    

--Facem Operatii SQL dinamice folosind DBMS_SQL si DBMS_DDL:

DECLARE
    cur SYS_REFCURSOR;
    sql_stmt VARCHAR2(100);
    example_row example_table%ROWTYPE;
BEGIN
    --DBMS_SQL --> SYS_REFCURSOR
    sql_stmt := 'SELECT * FROM example_table WHERE id = 1';
    OPEN cur FOR sql_stmt;
    
    LOOP
        FETCH cur INTO example_row;
        EXIT WHEN cur%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Dynamic SQL Result: ID=' || example_row.id || ', NAME=' || example_row.name);
    END LOOP;

    CLOSE cur;

    --DDL  --> execute immediate
    sql_stmt := 'ALTER TABLE example_table ADD CONSTRAINT pk_example_table PRIMARY KEY (id)';
    EXECUTE IMMEDIATE sql_stmt;

    DBMS_OUTPUT.PUT_LINE('Constraint added to the table.');
END;
/

SELECT * FROM example_table;






















CREATE OR REPLACE PACKAGE my_package AS
    my_variable NUMBER;
END my_package;

CREATE OR REPLACE PACKAGE BODY my_package AS
BEGIN
    my_variable := 42;
END my_package;












--E1
-- d
DECLARE 
    TYPE refcursor IS REF CURSOR;
    CURSOR c IS 
        SELECT j2.job_title, CURSOR
            (SELECT e.last_name, e.first_name, e.salary
            FROM employees e, jobs j
            WHERE j.job_id = e.job_id AND
                    j.job_id = j2.job_id)
        FROM jobs j2;
    titlu_job jobs.job_title%TYPE;
    nume_angajat employees.first_name%TYPE;
    prenume_angajat employees.last_name%TYPE;
    salariu employees.salary%TYPE;
    referinta_cursor refcursor;
    counter NUMBER(5);
BEGIN
    OPEN c;
    LOOP
        FETCH c INTO titlu_job, referinta_cursor;
        EXIT WHEN c%NOTFOUND;
        DBMS_OUTPUT.put_line(titlu_job);
        LOOP 
            FETCH referinta_cursor INTO nume_angajat, prenume_angajat, salariu;
            EXIT WHEN referinta_cursor%NOTFOUND;
            DBMS_OUTPUT.put_line(nume_angajat || ' ' || prenume_angajat || ' ' || salariu);
        END LOOP;
        
        DBMS_OUTPUT.new_line();

    END LOOP;
    
END;
/


--2
DECLARE 
    TYPE tip_joburi IS TABLE OF jobs.job_id%TYPE;
    CURSOR c (job_curent jobs.job_id%TYPE)IS 
        SELECT e.last_name, e.first_name, e.salary
        FROM employees e, jobs j
        WHERE j.job_id = e.job_id AND
                j.job_id = job_curent;
                    numar_joburi NUMBER;
    titlu_job jobs.job_title%TYPE;
    nume_angajat employees.first_name%TYPE;
    prenume_angajat employees.last_name%TYPE;
    salariu employees.salary%TYPE;
    joburi tip_joburi := tip_joburi();
    numar_salariati NUMBER(5);
    counter NUMBER(5);
    salariu_total_job NUMBER(8,2);
    salariu_mediu_job NUMBER(8,2);
    salariu_total NUMBER(10,2) := 0;
    salariu_mediu NUMBER(10,2) := 0;
    counter_total NUMBER(5) := 0;
BEGIN
    SELECT COUNT(*) INTO numar_joburi FROM jobs;
    joburi.EXTEND(numar_joburi);
    SELECT j.job_id BULK COLLECT INTO joburi FROM jobs j;
    
    FOR i IN joburi.FIRST..joburi.LAST LOOP   
    
        SELECT job_title
        INTO titlu_job
        FROM jobs j
        WHERE j.job_id = joburi(i);     
        counter := 0;
        salariu_total_job := 0;
        
        SELECT count(*)
        INTO numar_salariati
        FROM employees e, jobs j
        WHERE e.job_id = j.job_id AND
            j.job_id = joburi(i);
        
        IF numar_salariati = 0 THEN
            DBMS_OUTPUT.put_line('Niciun angajat ce lucreaza ca ' || titlu_job);
        ELSIF numar_salariati = 1 THEN
            DBMS_OUTPUT.put_line('Un angajat ce lucreaza ca ' || titlu_job);
        ELSIF numar_salariati < 20 THEN
            DBMS_OUTPUT.put_line(numar_salariati || ' angajati ce lucreaza ca ' || titlu_job);
        ELSE
            DBMS_OUTPUT.put_line(numar_salariati || ' de angajati ce lucreaza ca ' || titlu_job);
        END IF;
        
        OPEN c(joburi(i));
        LOOP
            FETCH c INTO nume_angajat, prenume_angajat, salariu;
            EXIT WHEN c%NOTFOUND;
            DBMS_OUTPUT.put_line(counter + 1 || ' ' || nume_angajat || ' ' || prenume_angajat || ' ' || salariu);
            counter := counter + 1;
            salariu_total_job := salariu_total_job + salariu;
            counter_total := counter_total + 1;
        END LOOP;
        CLOSE c;
        
        salariu_total := salariu_total + salariu_total_job;
        IF counter = 0 THEN 
            DBMS_OUTPUT.put_line('Niciun angajat.');
        ELSE
            salariu_mediu_job := salariu_total_job / counter;
            DBMS_OUTPUT.put_line('Salariul total e ' || salariu_total_job || ' cel mediu e ' || salariu_mediu_job);
        END IF;
        DBMS_OUTPUT.new_line();
    END LOOP;
    salariu_mediu := salariu_total / counter_total;
    DBMS_OUTPUT.put_line('Salariul total la toti angajatii e ' || salariu_total || ' cel mediu e ' || salariu_mediu);
END;
/


--6

DECLARE
     CURSOR c_util IS (SELECT *
     FROM utilizatori
     WHERE id_utilizator IN (1,2,3,4));
     
     CURSOR c_utilizator (u_id utilizatori.id_utilizator%TYPE) IS (SELECT * FROM utilizatori
                                                                 WHERE id_utilizator = u_id); 
                                                                 
     u_id utilizatori%ROWTYPE;
     u_utilizator employees%ROWTYPE;
BEGIN
     
     OPEN c_util;
     LOOP 
         FETCH c_util INTO u_id;
         EXIT WHEN c_util%NOTFOUND;
         DBMS_OUTPUT.PUT_LINE(u_id.nume_utilizator);
         OPEN c_utilizator(u_id.id_utilizator);
             LOOP 
                 FETCH c_utilizator INTO u_utilizator;
                 EXIT WHEN c_utilizator%NOTFOUND;
                 DBMS_OUTPUT.PUT_LINE(u_utilizator.id_utilizator);
                 END LOOP;
                 CLOSE c_utilizator;
         END LOOP;
    
     CLOSE c_util;
END;
/

SET SERVEROUTPUT ON;
    
    



--E3
DECLARE 
    TYPE tip_joburi IS TABLE OF jobs.job_id%TYPE;
    CURSOR c (job_curent jobs.job_id%TYPE)IS 
        SELECT e.last_name, e.first_name, e.salary, e.commission_pct
        FROM employees e, jobs j
        WHERE j.job_id = e.job_id and
                j.job_id = job_curent;
                    numar_joburi NUMBER;
    titlu_job jobs.job_title%TYPE;
    nume_angajat employees.first_name%TYPE;
    prenume_angajat employees.last_name%TYPE;
    salariu employees.salary%TYPE;
    joburi tip_joburi := tip_joburi();
    numar_salariati NUMBER(5);
    counter NUMBER(5);
    salariu_total_job NUMBER(8,2);
    salariu_mediu_job NUMBER(8,2);
    salariu_total NUMBER(10,2) := 0;
    salariu_mediu NUMBER(10,2) := 0;
    counter_total NUMBER(5) := 0;
    procentaj_comision NUMBER(5) := 0;
    total_cu_comision NUMBER(10,2) := 0;
BEGIN
    SELECT COUNT(*) INTO numar_joburi FROM jobs;
    joburi.EXTEND(numar_joburi);
    SELECT j.job_id BULK COLLECT INTO joburi FROM jobs j;
    
    FOR i IN joburi.FIRST..joburi.LAST LOOP   
    
        SELECT job_title
        INTO titlu_job
        FROM jobs j
        WHERE j.job_id = joburi(i);     
        counter := 0;
        salariu_total_job := 0;
        
        SELECT COUNT(*)
        INTO numar_salariati
        FROM employees e, jobs j
        WHERE e.job_id = j.job_id AND
            j.job_id = joburi(i);
            
        SELECT SUM(salary) + SUM(salary*commission_pct)
        INTO total_cu_comision
        FROM EMPLOYEES;
        
        IF numar_salariati = 0 THEN
            DBMS_OUTPUT.put_line('Niciun angajat pe ' || titlu_job);
        ELSIF numar_salariati = 1 THEN
            DBMS_OUTPUT.put_line('Un angajat pe ' || titlu_job);
        ELSIF numar_salariati < 20 THEN
            DBMS_OUTPUT.put_line(numar_salariati || ' angajati pe ' || titlu_job);
        ELSE
            DBMS_OUTPUT.put_line(numar_salariati || ' de angajati pe ' || titlu_job);
        END IF;
        
        OPEN c(joburi(i));
        LOOP
            FETCH c INTO nume_angajat, prenume_angajat, salariu, procentaj_comision;
            EXIT WHEN c%NOTFOUND;
            DBMS_OUTPUT.put_line(counter + 1 || ' ' || nume_angajat || ' ' || prenume_angajat || ' ' || 
            salariu || ' ' || 
            TO_CHAR(((salariu + (salariu * nvl(procentaj_comision, 0))) * 100 / total_cu_comision), '0.00'));
            
            counter := counter + 1;
            salariu_total_job := salariu_total_job + salariu;
            counter_total := counter_total + 1;
        END LOOP;
        CLOSE c;
        
        salariu_total := salariu_total + salariu_total_job;
        IF counter = 0 THEN 
            DBMS_OUTPUT.put_line('Niciun ang.');
        ELSE
            salariu_mediu_job := salariu_total_job / counter;
            DBMS_OUTPUT.put_line('Salariul total angajati ' 
            || salariu_total_job || ' cel mediu e ' || salariu_mediu_job);
        END IF;
        DBMS_OUTPUT.new_line();
    END LOOP;
    salariu_mediu := salariu_total / counter_total;
    DBMS_OUTPUT.put_line('Salariul total angajati ' || salariu_total || ' cel mediu e ' || salariu_mediu);
END;
/
    

--E4
DECLARE 
    TYPE tip_joburi IS TABLE OF jobs.job_id%TYPE;
    CURSOR c (job_curent jobs.job_id%TYPE)IS 
        SELECT e.last_name, e.first_name, e.salary, e.commission_pct
        FROM employees e, jobs j
        WHERE j.job_id = e.job_id AND
                j.job_id = job_curent
        ORDER BY e.salary DESC; 
    numar_joburi NUMBER;
    titlu_job jobs.job_title%TYPE;
    nume_angajat employees.first_name%TYPE;
    prenume_angajat employees.last_name%TYPE;
    salariu employees.salary%TYPE;
    joburi tip_joburi := tip_joburi();
    numar_salariati NUMBER(5);
    counter NUMBER(5);
    salariu_total_job NUMBER(8,2);
    salariu_mediu_job NUMBER(8,2);
    salariu_total NUMBER(10,2) := 0;
    salariu_mediu NUMBER(10,2) := 0;
    counter_total NUMBER(5) := 0;
    procentaj_comision NUMBER(5) := 0;
    total_cu_comision NUMBER(10,2) := 0;
BEGIN  
    
    SELECT COUNT(*) INTO numar_joburi FROM jobs;
    joburi.EXTEND(numar_joburi);
    SELECT j.job_id BULK COLLECT INTO joburi FROM jobs j;
    
    FOR i IN joburi.FIRST..joburi.LAST LOOP   
        counter := 0;
        SELECT job_title
        INTO titlu_job
        FROM jobs j
        WHERE j.job_id = joburi(i); 
        
        SELECT COUNT(*)
        INTO numar_salariati
        FROM employees e, jobs j
        WHERE e.job_id = j.job_id AND
            j.job_id = joburi(i);

        IF numar_salariati < 5 THEN
            DBMS_OUTPUT.put_line('Mai putin de 5 ang pe  ' || titlu_job);
        ELSE
            DBMS_OUTPUT.put_line(titlu_job);
        END IF;
        
        OPEN c(joburi(i));
        LOOP
            FETCH c INTO nume_angajat, prenume_angajat, salariu, procentaj_comision;
            EXIT WHEN c%NOTFOUND OR c%ROWCOUNT > 5;
            DBMS_OUTPUT.put_line(counter + 1 || ' ' || nume_angajat || ' ' || prenume_angajat || ' ' || salariu);
            counter := counter + 1;
        END LOOP;
        CLOSE c;
         
        DBMS_OUTPUT.new_line();
    END LOOP;
END;
/


--E5
DECLARE 
    TYPE tip_joburi IS TABLE OF jobs.job_id%TYPE;
    CURSOR c (job_curent jobs.job_id%TYPE)IS 
        SELECT e.last_name, e.first_name, e.salary, e.commission_pct
        FROM employees e, jobs j
        WHERE j.job_id = e.job_id AND
                j.job_id = job_curent
        ORDER BY e.salary DESC; 
    numar_joburi NUMBER;
    titlu_job jobs.job_title%TYPE;
    nume_angajat employees.first_name%TYPE;
    prenume_angajat employees.last_name%TYPE;
    salariu employees.salary%TYPE;
    joburi tip_joburi := tip_joburi();
    numar_salariati NUMBER(5);
    counter NUMBER(5);
    salariu_total_job NUMBER(8,2);
    salariu_mediu_job NUMBER(8,2);
    salariu_total NUMBER(10,2) := 0;
    salariu_mediu NUMBER(10,2) := 0;
    counter_total NUMBER(5) := 0;
    procentaj_comision NUMBER(5) := 0;
    total_cu_comision NUMBER(10,2) := 0;
    salariu_angajat employees.salary%TYPE;
BEGIN  
    
    SELECT COUNT(*) INTO numar_joburi FROM jobs;
    joburi.EXTEND(numar_joburi);
    SELECT j.job_id BULK COLLECT INTO joburi FROM jobs j;
    
    FOR i IN joburi.FIRST..joburi.LAST LOOP   
        salariu_angajat := 0;
        counter := 0;
        SELECT job_title
        INTO titlu_job
        FROM jobs j
        WHERE j.job_id = joburi(i); 
        
        SELECT COUNT(*)
        INTO numar_salariati
        FROM employees e, jobs j
        WHERE e.job_id = j.job_id AND
            j.job_id = joburi(i);

        IF numar_salariati < 5 THEN
            DBMS_OUTPUT.put_line('Mai putin de 5 ang pe ' || titlu_job);
        ELSE
            DBMS_OUTPUT.put_line(titlu_job);
        END IF;
        
        OPEN c(joburi(i));
        LOOP
            FETCH c INTO nume_angajat, prenume_angajat, salariu, procentaj_comision;
            EXIT WHEN c%NOTFOUND or c%ROWCOUNT > 5;
            IF salariu_angajat = 0 or salariu <> salariu_angajat THEN
                salariu_angajat := salariu;
                counter := counter + 1;
            END IF;
            DBMS_OUTPUT.put_line(counter || ' ' || nume_angajat || ' ' || prenume_angajat || ' ' || salariu);
        END LOOP;
        CLOSE c;
         
        DBMS_OUTPUT.new_line();
    END LOOP;
END;
/
    